from datetime import date, timedelta
from aiogram import types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from config import ButtonText, Emoji, MessageFormatter
from database import DatabaseManager

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def create_date_keyboard(available_dates: dict, prefix: str = "user_date") -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–∞—Ç–∞–º–∏"""
    keyboard = []
    today = date.today()
    
    for i in range(7):
        current_date = today + timedelta(days=i)
        date_str = current_date.strftime("%Y-%m-%d")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
        if date_str in available_dates:
            status_emoji = Emoji.PARTIAL if available_dates[date_str]['available_count'] > 0 else Emoji.BUSY
            button_text = MessageFormatter.format_calendar_day(current_date) + f" {status_emoji}"
        else:
            button_text = MessageFormatter.format_calendar_day(current_date) + f" {Emoji.ERROR}"
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞—Ç—ã –±–µ–∑ –≤–∞–∫–∞–Ω—Å–∏–π
        
        keyboard.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"{prefix}_{date_str}"
        )])
    
    keyboard.append([InlineKeyboardButton(text=ButtonText.REFRESH, callback_data="user_refresh")])
    keyboard.append([InlineKeyboardButton(text=ButtonText.BACK, callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_vacancy_keyboard(vacancies: list, date_str: str, prefix: str = "user_vacancy") -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏"""
    keyboard = []
    
    for vacancy in vacancies:
        button_text = f"{vacancy['vacancy_name']} ({vacancy['available_count']} –º–µ—Å—Ç)"
        keyboard.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"{prefix}_{date_str}_{vacancy['id_vacancy']}"
        )])
    
    keyboard.append([InlineKeyboardButton(text=ButtonText.BACK, callback_data="user_reserve")])
    keyboard.append([InlineKeyboardButton(text=ButtonText.TO_MAIN, callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_shift_keyboard(shifts: list, date_str: str, vacancy_id: int, prefix: str = "user_shift") -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–º–µ–Ω–∞–º–∏"""
    keyboard = []
    
    for shift in shifts:
        button_text = f"{shift['shift_name']} ({shift['available_count']} –º–µ—Å—Ç)"
        keyboard.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"{shift}_{date_str}_{vacancy_id}_{shift['id_shift']}"
        )])
    
    keyboard.append([InlineKeyboardButton(text=ButtonText.BACK, callback_data=f"user_vacancy_{date_str}")])
    keyboard.append([InlineKeyboardButton(text=ButtonText.TO_MAIN, callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_confirmation_keyboard(date_str: str, vacancy_id: int, shift_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton(
            text=f"{Emoji.SUCCESS} –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å",
            callback_data=f"user_confirm_{date_str}_{vacancy_id}_{shift_id}"
        )],
        [InlineKeyboardButton(
            text=ButtonText.BACK,
            callback_data=f"user_shift_{date_str}_{vacancy_id}"
        )],
        [InlineKeyboardButton(
            text=ButtonText.TO_MAIN,
            callback_data="back_to_main"
        )]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_user_reservations_keyboard(reservations: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = []
    
    for reservation in reservations:
        date_str = reservation['date_reservation'].strftime('%Y-%m-%d')
        button_text = f"{reservation['date_reservation'].strftime('%d.%m')} - {reservation['vacancy_name']} ({reservation['shift_name']})"
        keyboard.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"user_edit_reservation_{reservation['id']}"
        )])
    
    if not reservations:
        keyboard.append([InlineKeyboardButton(
            text="üìù –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å",
            callback_data="user_reserve"
        )])
    
    keyboard.append([InlineKeyboardButton(text=ButtonText.BACK, callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
async def handle_user_reserve(callback: types.CallbackQuery, db: DatabaseManager):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    user = await db.get_user(user_id)
    if not user:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    if user['is_blocked']:
        await callback.answer("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    
    if user['is_banned']:
        await callback.answer("‚ö†Ô∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–∞–Ω–µ–Ω. –§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
    available_dates = {}
    today = date.today()
    
    for i in range(7):
        current_date = today + timedelta(days=i)
        slots = await db.get_available_slots(current_date)
        
        if slots:
            date_str = current_date.strftime("%Y-%m-%d")
            total_available = sum(slot['available_count'] for slot in slots)
            available_dates[date_str] = {'available_count': total_available}
    
    if not available_dates:
        await callback.message.edit_text(
            f"{Emoji.INFO} –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=ButtonText.REFRESH, callback_data="user_reserve")],
                [InlineKeyboardButton(text=ButtonText.BACK, callback_data="back_to_main")]
            ])
        )
        return
    
    await callback.message.edit_text(
        f"{Emoji.CALENDAR} –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:\n\n"
        f"{Emoji.SUCCESS} - –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞\n"
        f"{Emoji.PARTIAL} - –º–µ—Å—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã\n"
        f"{Emoji.BUSY} - –º–µ—Å—Ç –Ω–µ—Ç",
        reply_markup=create_date_keyboard(available_dates)
    )

async def handle_user_date_selection(callback: types.CallbackQuery, db: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    date_str = callback.data.split('_')[-1]
    selected_date = date.fromisoformat(date_str)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    slots = await db.get_available_slots(selected_date)
    
    if not slots:
        await callback.answer("‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç!")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º
    vacancies = {}
    for slot in slots:
        if slot['id_vacancy'] not in vacancies:
            vacancies[slot['id_vacancy']] = {
                'id_vacancy': slot['id_vacancy'],
                'vacancy_name': slot['vacancy_name'],
                'available_count': 0
            }
        vacancies[slot['id_vacancy']]['available_count'] += slot['available_count']
    
    vacancy_list = list(vacancies.values())
    
    await callback.message.edit_text(
        f"{Emoji.REGISTER} –ó–∞–ø–∏—Å—å –Ω–∞ {selected_date.strftime('%d.%m.%Y')}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
        reply_markup=create_vacancy_keyboard(vacancy_list, date_str)
    )

async def handle_user_vacancy_selection(callback: types.CallbackQuery, db: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    parts = callback.data.split('_')
    date_str = parts[-2]
    vacancy_id = int(parts[-1])
    
    selected_date = date.fromisoformat(date_str)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–º–µ–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
    slots = await db.get_available_slots(selected_date)
    available_shifts = [
        slot for slot in slots 
        if slot['id_vacancy'] == vacancy_id and slot['available_count'] > 0
    ]
    
    if not available_shifts:
        await callback.answer("‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–º–µ–Ω!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    vacancy_name = available_shifts[0]['vacancy_name']
    
    await callback.message.edit_text(
        f"{Emoji.REGISTER} –ó–∞–ø–∏—Å—å –Ω–∞ {selected_date.strftime('%d.%m.%Y')}\n"
        f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {vacancy_name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É:",
        reply_markup=create_shift_keyboard(available_shifts, date_str, vacancy_id)
    )

async def handle_user_shift_selection(callback: types.CallbackQuery, db: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–º–µ–Ω—ã"""
    parts = callback.data.split('_')
    date_str = parts[-3]
    vacancy_id = int(parts[-2])
    shift_id = int(parts[-1])
    
    selected_date = date.fromisoformat(date_str)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–ª–æ—Ç–µ
    slots = await db.get_available_slots(selected_date)
    selected_slot = next(
        (slot for slot in slots 
         if slot['id_vacancy'] == vacancy_id and slot['id_shift'] == shift_id),
        None
    )
    
    if not selected_slot or selected_slot['available_count'] <= 0:
        await callback.answer("‚ùå –í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ!")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = f"""
{Emoji.SUCCESS} –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏

üìÖ –î–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y (%A)')}
üëî –î–æ–ª–∂–Ω–æ—Å—Ç—å: {selected_slot['vacancy_name']}
üïê –°–º–µ–Ω–∞: {selected_slot['shift_name']}
üìä –î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç: {selected_slot['available_count']}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å?
    """
    
    await callback.message.edit_text(
        confirmation_text,
        reply_markup=create_confirmation_keyboard(date_str, vacancy_id, shift_id)
    )

async def handle_user_confirmation(callback: types.CallbackQuery, db: DatabaseManager):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    parts = callback.data.split('_')
    date_str = parts[-3]
    vacancy_id = int(parts[-2])
    shift_id = int(parts[-1])
    
    user_id = callback.from_user.id
    selected_date = date.fromisoformat(date_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
    existing_reservations = await db.get_user_reservations(user_id)
    if any(res['date_reservation'] == selected_date for res in existing_reservations):
        await callback.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —ç—Ç—É –¥–∞—Ç—É!")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é
    reservation_id = await db.make_reservation(user_id, selected_date, shift_id, vacancy_id)
    
    if not reservation_id:
        await callback.message.edit_text(
            f"{Emoji.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å!\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ú–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã\n"
            "‚Ä¢ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —ç—Ç—É –¥–∞—Ç—É\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="user_reserve")],
                [InlineKeyboardButton(text=ButtonText.TO_MAIN, callback_data="back_to_main")]
            ])
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
    slots = await db.get_available_slots(selected_date)
    selected_slot = next(
        (slot for slot in slots 
         if slot['id_vacancy'] == vacancy_id and slot['id_shift'] == shift_id),
        None
    )
    
    success_text = f"""
{Emoji.SUCCESS} –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!

üìÖ –î–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y (%A)')}
üëî –î–æ–ª–∂–Ω–æ—Å—Ç—å: {selected_slot['vacancy_name']}
üïê –°–º–µ–Ω–∞: {selected_slot['shift_name']}
üÜî –ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏: {reservation_id}

{Emoji.INFO} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
–î–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å.
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å", callback_data="user_edit")],
        [InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –µ—â–µ", callback_data="user_reserve")],
        [InlineKeyboardButton(text=ButtonText.TO_MAIN, callback_data="back_to_main")]
    ])
    
    await callback.message.edit_text(success_text, reply_markup=keyboard)
    
    # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏

async def handle_user_edit_reservations(callback: types.CallbackQuery, db: DatabaseManager):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = callback.from_user.id
    
    reservations = await db.get_user_reservations(user_id)
    
    if not reservations:
        await callback.message.edit_text(
            f"{Emoji.INFO} –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.\n\n"
            "–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="user_reserve")],
                [InlineKeyboardButton(text=ButtonText.BACK, callback_data="back_to_main")]
            ])
        )
        return
    
    reservations_text = f"{Emoji.INFO} –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
    for i, reservation in enumerate(reservations, 1):
        reservations_text += f"{i}. {MessageFormatter.format_reservation(reservation)}\n\n"
    
    reservations_text += "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    
    await callback.message.edit_text(
        reservations_text,
        reply_markup=create_user_reservations_keyboard(reservations)
    )

async def handle_edit_specific_reservation(callback: types.CallbackQuery, db: DatabaseManager):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
    reservation_id = int(callback.data.split('_')[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
    user_id = callback.from_user.id
    reservations = await db.get_user_reservations(user_id)
    reservation = next((r for r in reservations if r['id'] == reservation_id), None)
    
    if not reservation:
        await callback.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    edit_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üóëÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
            callback_data=f"user_cancel_reservation_{reservation_id}"
        )],
        [InlineKeyboardButton(
            text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É",
            callback_data=f"user_change_date_{reservation_id}"
        )],
        [InlineKeyboardButton(
            text="üëî –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å",
            callback_data=f"user_change_vacancy_{reservation_id}"
        )],
        [InlineKeyboardButton(
            text="üïê –ò–∑–º–µ–Ω–∏—Ç—å —Å–º–µ–Ω—É",
            callback_data=f"user_change_shift_{reservation_id}"
        )],
        [InlineKeyboardButton(text=ButtonText.BACK, callback_data="user_edit")],
        [InlineKeyboardButton(text=ButtonText.TO_MAIN, callback_data="back_to_main")]
    ])
    
    edit_text = f"""
‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏

{MessageFormatter.format_reservation(reservation)}

–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?
    """
    
    await callback.message.edit_text(edit_text, reply_markup=edit_keyboard)

async def handle_cancel_reservation(callback: types.CallbackQuery, db: DatabaseManager):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    reservation_id = int(callback.data.split('_')[-1])
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{Emoji.ERROR} –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
            callback_data=f"user_confirm_cancel_{reservation_id}"
        )],
        [InlineKeyboardButton(
            text=ButtonText.BACK,
            callback_data=f"user_edit_reservation_{reservation_id}"
        )]
    ])
    
    await callback.message.edit_text(
        f"{Emoji.WARNING} –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã\n\n"
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=confirm_keyboard
    )

async def handle_confirm_cancel_reservation(callback: types.CallbackQuery, db: DatabaseManager):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏"""
    reservation_id = int(callback.data.split('_')[-1])
    
    try:
        await db.delete_reservation(reservation_id)
        
        await callback.message.edit_text(
            f"{Emoji.SUCCESS} –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞", callback_data="user_reserve")],
                [InlineKeyboardButton(text=ButtonText.TO_MAIN, callback_data="back_to_main")]
            ])
        )
    except Exception as e:
        await callback.message.edit_text(
            f"{Emoji.ERROR} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏!\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=ButtonText.BACK, callback_data="user_edit")],
                [InlineKeyboardButton(text=ButtonText.TO_MAIN, callback_data="back_to_main")]
            ])
        )

async def handle_user_refresh(callback: types.CallbackQuery, db: DatabaseManager):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    is_admin = user['is_admin']
    welcome_text = "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if is_admin else "üë§ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    
    await callback.message.edit_text(
        f"{welcome_text}\n\nüîÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard(is_admin)
    )

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
def get_main_menu_keyboard(is_admin=False):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if is_admin:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º", callback_data="admin_calendar")],
            [InlineKeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º", callback_data="admin_handbook")],
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π", callback_data="admin_confirmations")],
            [InlineKeyboardButton(text="üìä –û—Ç—á–µ—Ç—ã", callback_data="admin_reports")],
            [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
            [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="admin_broadcast")]
        ])
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É", callback_data="user_reserve")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å", callback_data="user_edit")],
            [InlineKeyboardButton(text="üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫", callback_data="user_handbook")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="user_refresh")]
        ])
    return keyboard

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.py)
def register_user_handlers(dp, db: DatabaseManager):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    @dp.callback_query(F.data == "user_reserve")
    async def user_reserve_callback(callback: types.CallbackQuery):
        await handle_user_reserve(callback, db)
    
    @dp.callback_query(F.data.startswith("user_date_"))
    async def user_date_callback(callback: types.CallbackQuery):
        await handle_user_date_selection(callback, db)
    
    @dp.callback_query(F.data.startswith("user_vacancy_"))
    async def user_vacancy_callback(callback: types.CallbackQuery):
        await handle_user_vacancy_selection(callback, db)
    
    @dp.callback_query(F.data.startswith("user_shift_"))
    async def user_shift_callback(callback: types.CallbackQuery):
        await handle_user_shift_selection(callback, db)
    
    @dp.callback_query(F.data.startswith("user_confirm_"))
    async def user_confirm_callback(callback: types.CallbackQuery):
        if callback.data.startswith("user_confirm_cancel_"):
            await handle_confirm_cancel_reservation(callback, db)
        else:
            await handle_user_confirmation(callback, db)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
    @dp.callback_query(F.data == "user_edit")
    async def user_edit_callback(callback: types.CallbackQuery):
        await handle_user_edit_reservations(callback, db)
    
    @dp.callback_query(F.data.startswith("user_edit_reservation_"))
    async def user_edit_specific_callback(callback: types.CallbackQuery):
        await handle_edit_specific_reservation