import asyncio
import logging
from datetime import datetime
from os import getenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from database import DatabaseManager
from config import Config



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=Config.BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
db = DatabaseManager()

from user_handlers import register_user_handlers
register_user_handlers(dp, db)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class UserRegistration(StatesGroup):
    waiting_fullname = State()
    waiting_phone = State()

class AdminCalendar(StatesGroup):
    selecting_date = State()
    selecting_vacancy = State()
    selecting_shift = State()
    entering_count = State()

class UserReservation(StatesGroup):
    selecting_date = State()
    selecting_vacancy = State()
    selecting_shift = State()
    confirming = State()

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
def get_main_menu_keyboard(is_admin=False):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if is_admin:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º", callback_data="admin_calendar")],
            [InlineKeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º", callback_data="admin_handbook")],
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π", callback_data="admin_confirmations")],
            [InlineKeyboardButton(text="üìä –û—Ç—á–µ—Ç—ã", callback_data="admin_reports")],
            [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
            [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="admin_broadcast")]
        ])
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É", callback_data="user_reserve")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å", callback_data="user_edit")],
            [InlineKeyboardButton(text="üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫", callback_data="user_handbook")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="user_refresh")]
        ])
    return keyboard

def get_back_keyboard():
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

def get_calendar_keyboard(year, month, reserved_dates=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥"""
    from datetime import date, timedelta
    
    keyboard = []
    today = date.today()
    
    for i in range(7):
        current_date = today + timedelta(days=i)
        date_str = current_date.strftime("%Y-%m-%d")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        status = ""
        if reserved_dates and date_str in reserved_dates:
            status = " ‚úÖ" if reserved_dates[date_str]['filled'] else " üü°"
        
        button_text = f"{current_date.strftime('%d.%m')} ({current_date.strftime('%a')}){status}"
        keyboard.append([InlineKeyboardButton(
            text=button_text, 
            callback_data=f"date_{date_str}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(user_id)
    
    if not user:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")],
            [InlineKeyboardButton(text="üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫", callback_data="user_handbook")]
        ])
        
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø—Ä–∏–µ–º–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=keyboard
        )
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user['is_blocked']:
            await message.answer("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        if user['is_banned']:
            await message.answer("‚ö†Ô∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–∞–Ω–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        is_admin = user['is_admin']
        welcome_text = "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if is_admin else "üë§ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        
        await message.answer(
            f"{welcome_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard(is_admin)
        )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(F.data == "register")
async def process_register(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):",
        reply_markup=get_back_keyboard()
    )
    await state.set_state(UserRegistration.waiting_fullname)

@dp.message(UserRegistration.waiting_fullname)
async def process_fullname(message: types.Message, state: FSMContext):
    full_name = message.text.strip()
    
    if len(full_name) < 5:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤):")
        return
    
    await state.update_data(full_name=full_name)
    await message.answer(
        "üì± –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:",
        reply_markup=get_back_keyboard()
    )
    await state.set_state(UserRegistration.waiting_phone)

@dp.message(UserRegistration.waiting_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone.startswith('+7') or len(phone) != 12:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    full_name = data['full_name']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user_id = message.from_user.id
    username = message.from_user.username or ""
    
    await db.register_user(user_id, full_name, phone, username)
    
    await message.answer(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–ò–º—è: {full_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
        reply_markup=get_main_menu_keyboard(False)
    )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")],
            [InlineKeyboardButton(text="üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫", callback_data="user_handbook")]
        ])
        
        await callback.message.edit_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø—Ä–∏–µ–º–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=keyboard
        )
    else:
        is_admin = user['is_admin']
        welcome_text = "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if is_admin else "üë§ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        
        await callback.message.edit_text(
            f"{welcome_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard(is_admin)
        )

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
@dp.callback_query(F.data == "user_handbook")
async def show_handbook(callback: types.CallbackQuery):
    handbook_text = await db.get_handbook()
    
    if not handbook_text:
        handbook_text = "üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    
    await callback.message.edit_text(
        f"üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤–∞–∫–∞–Ω—Å–∏–π\n\n{handbook_text}",
        reply_markup=get_back_keyboard()
    )

# –ö–æ–º–∞–Ω–¥–∞ /handbook –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫—É
@dp.message(Command("handbook"))
async def cmd_handbook(message: types.Message):
    handbook_text = await db.get_handbook()
    
    if not handbook_text:
        handbook_text = "üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    
    await message.answer(f"üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤–∞–∫–∞–Ω—Å–∏–π\n\n{handbook_text}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await db.init_db()
        
        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())